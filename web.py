import streamlit as st
import requests
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from functools import reduce

st.set_page_config(layout="wide")

st.markdown(
    """
    <style>
    [data-testid="stAppViewContainer"] > .main {
        padding: 1rem !important;
    }
    .block-container {
        max-width: 90% !important;
        padding-left: 1rem !important;
        padding-right: 1rem !important;
    }
    </style>
    """,
    unsafe_allow_html=True
)


def home_page():
    st.title("\U0001F331 H·ªá th·ªëng d·ª± ƒëo√°n kh·∫£ nƒÉng √¥ nhi·ªÖm kh√¥ng kh√≠")

    option = st.radio("Ch·ªçn c√°ch nh·∫≠p d·ªØ li·ªáu:", ["üî¢ Nh·∫≠p th·ªß c√¥ng", "üìÇ T·∫£i l√™n file CSV"])

    if option == "üî¢ Nh·∫≠p th·ªß c√¥ng":
        col1, col2 = st.columns(2)
        with col1:
            co = st.number_input("üí® CO(GT)", value=0.0, format="%.3f")
            st.markdown("üîπ **CO (Carbon Monoxide):** Kh√≠ kh√¥ng m√†u, kh√¥ng m√πi, g√¢y ƒë·ªôc khi h√≠t ph·∫£i v·ªõi n·ªìng ƒë·ªô cao.")

            no2 = st.number_input("üå´ NO2(GT)", value=0.0, format="%.3f")
            st.markdown("üîπ **NO2 (Nitrogen Dioxide):** Kh√≠ ƒë·ªôc g√¢y vi√™m ƒë∆∞·ªùng h√¥ h·∫•p v√† √¥ nhi·ªÖm m√¥i tr∆∞·ªùng.")

        with col2:
            nox = st.number_input("üå™ NOx(GT)", value=0.0, format="%.3f")
            st.markdown(
                "üîπ **NOx (Nitrogen Oxides):** H·ª£p ch·∫•t c·ªßa Nit∆° v√† Oxy, g√≥p ph·∫ßn g√¢y m∆∞a axit v√† √¥ nhi·ªÖm kh√¥ng kh√≠.")

            c6h6 = st.number_input("‚òÅÔ∏è C6H6(GT)", value=0.0, format="%.3f")
            st.markdown("üîπ **C6H6 (Benzene):** H·ª£p ch·∫•t h·ªØu c∆° d·ªÖ bay h∆°i, c√≥ th·ªÉ g√¢y ung th∆∞ khi ti·∫øp x√∫c l√¢u d√†i.")
        if st.button("üöÄ D·ª± ƒëo√°n"):
            data = {"CO(GT)": co, "NO2(GT)": no2, "NOx(GT)": nox, "C6H6(GT)": c6h6}
            try:
                response = requests.post("http://127.0.0.1:5000/predict", json=data)
                if response.status_code == 200:
                    result = response.json()
                    st.success(f"‚úÖ D·ª± ƒëo√°n m·ª©c ƒë·ªô √¥ nhi·ªÖm: {result['prediction']}")
                else:
                    st.error(f"‚ùå API tr·∫£ v·ªÅ l·ªói: {response.text}")
            except Exception as e:
                st.error(f"‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi g·ªçi API: {e}")

    elif option == "üìÇ T·∫£i l√™n file CSV":
        uploaded_file = st.file_uploader("üìÇ Ch·ªçn file CSV", type=["csv"])

        if uploaded_file is not None:
            df = pd.read_csv(uploaded_file)

            required_columns = ["CO(GT)", "NO2(GT)", "NOx(GT)", "C6H6(GT)"]
            if not all(col in df.columns for col in required_columns):
                st.error("‚ö†Ô∏è File CSV ph·∫£i ch·ª©a c√°c c·ªôt: CO(GT), NO2(GT), NOx(GT), C6H6(GT)")
            else:
                st.write("üìå **D·ªØ li·ªáu t·ª´ file CSV:**")
                st.dataframe(df)

                if st.button("üöÄ D·ª± ƒëo√°n t·ª´ CSV"):
                    predictions = []
                    for _, row in df.iterrows():
                        data = {
                            "CO(GT)": row["CO(GT)"],
                            "NO2(GT)": row["NO2(GT)"],
                            "NOx(GT)": row["NOx(GT)"],
                            "C6H6(GT)": row["C6H6(GT)"],
                        }
                        try:
                            response = requests.post("http://127.0.0.1:5000/predict", json=data)
                            if response.status_code == 200:
                                result = response.json()
                                predictions.append(result["prediction"])
                            else:
                                predictions.append("L·ªói API")
                        except:
                            predictions.append("L·ªói x·ª≠ l√Ω")

                    df["D·ª± ƒëo√°n"] = predictions
                    st.write("‚úÖ **K·∫øt qu·∫£ d·ª± ƒëo√°n:**")
                    st.dataframe(df)

                    csv = df.to_csv(index=False).encode("utf-8")
                    st.download_button("üì• T·∫£i xu·ªëng k·∫øt qu·∫£ (CSV)", csv, "predictions.csv", "text/csv")


def stats_page():
    st.header("üîç T√¨m ki·∫øm d·ªØ li·ªáu √¥ nhi·ªÖm v·ªõi MapReduce")

    @st.cache_data
    def load_data():
        df = pd.read_csv("timkiem.csv", sep=",")
        df["Date"] = pd.to_datetime(df["Date"], format="%m/%d/%Y", errors="coerce")
        return df

    data = load_data()
    filter_option = st.sidebar.radio("L·ªçc theo:", ["Ng√†y", "Ch·ªâ s·ªë √¥ nhi·ªÖm"])
    pollutant_options = ["CO(GT)", "NO2(GT)", "NOx(GT)", "C6H6(GT)"]

    def map_group(record):
        return ((record["Date"].date(), record["Time"]), record)

    mapped_pairs = list(map(map_group, data.to_dict(orient="records")))
    final_results = []

    def reduce_group(acc, pair):
        key, record = pair
        if key not in acc:
            acc[key] = []
        acc[key].append(record)
        return acc

    grouped = reduce(reduce_group, mapped_pairs, {})

    if filter_option == "Ng√†y":
        start_date = st.sidebar.date_input("Ng√†y b·∫Øt ƒë·∫ßu", data["Date"].min())
        end_date = st.sidebar.date_input("Ng√†y k·∫øt th√∫c", data["Date"].max())

        if start_date > end_date:
            st.sidebar.error("Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ l·ªõn h∆°n ng√†y k·∫øt th√∫c!")
        else:
            filtered_groups = {k: v for k, v in grouped.items() if start_date <= k[0] <= end_date}
            for recs in filtered_groups.values():
                final_results.extend(recs)

    elif filter_option == "Ch·ªâ s·ªë √¥ nhi·ªÖm":
        selected_pollutant = st.sidebar.selectbox("Ch·ªçn ch·∫•t √¥ nhi·ªÖm", pollutant_options)
        min_value = float(data[selected_pollutant].min())
        max_value = float(data[selected_pollutant].max())
        min_pollution = st.sidebar.number_input(f"Gi√° tr·ªã t·ªëi thi·ªÉu c·ªßa {selected_pollutant}", value=min_value)
        max_pollution = st.sidebar.number_input(f"Gi√° tr·ªã t·ªëi ƒëa c·ªßa {selected_pollutant}", value=max_value)

        if min_pollution > max_pollution:
            st.sidebar.error("Gi√° tr·ªã t·ªëi thi·ªÉu kh√¥ng th·ªÉ l·ªõn h∆°n gi√° tr·ªã t·ªëi ƒëa!")
        else:
            for k, recs in grouped.items():
                valid_records = [r for r in recs if min_pollution <= r[selected_pollutant] <= max_pollution]
                if valid_records:
                    final_results.extend(valid_records)

    if final_results:
        df_filtered = pd.DataFrame(final_results)
        st.write(f"üìå T·ªïng s·ªë b·∫£n ghi t√¨m th·∫•y: {df_filtered.shape[0]}")
        st.dataframe(df_filtered)
        csv = df_filtered.to_csv(index=False).encode("utf-8")
        st.download_button("üì• T·∫£i xu·ªëng k·∫øt qu·∫£ (CSV)", csv, "filtered_data.csv", "text/csv")
    else:
        st.warning("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√π h·ª£p.")


def statistic_page():
    st.header("üìä Trang Th·ªëng K√™")

    @st.cache_data
    def load_data():
        df = pd.read_csv("thongke.csv")
        df["Date"] = pd.to_datetime(df["Date"], format="%m/%d/%Y", errors="coerce")

        # Ki·ªÉm tra n·∫øu "PollutionIndex" ch∆∞a t·ªìn t·∫°i, th√¨ t√≠nh to√°n
        if "PollutionIndex" not in df.columns:
            df["PollutionIndex"] = df[["CO(GT)", "NO2(GT)", "NOx(GT)", "C6H6(GT)"]].mean(axis=1)

        return df

    data = load_data()

    # N·∫øu c·ªôt PollutionLevel c√≥ c√°c gi√° tr·ªã 0,1,2, chuy·ªÉn th√†nh nh√£n
    data["PollutionLevel"] = data["PollutionLevel"].replace({
        0: "T·ªët",
        1: "Trung b√¨nh",
        2: "X·∫•u"
    })

    # üìå Th·ªëng k√™ t·ªïng quan
    st.subheader("üìà Th·ªëng k√™ t·ªïng quan")
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric("üìÖ S·ªë ng√†y c√≥ d·ªØ li·ªáu", data.shape[0])

    with col2:
        max_pollution_date = data.loc[data["PollutionIndex"].idxmax(), "Date"]
        st.metric("üî• Ng√†y √¥ nhi·ªÖm cao nh·∫•t", max_pollution_date.strftime("%Y-%m-%d"))

    with col3:
        min_pollution_date = data.loc[data["PollutionIndex"].idxmin(), "Date"]
        st.metric("üå± Ng√†y √¥ nhi·ªÖm th·∫•p nh·∫•t", min_pollution_date.strftime("%Y-%m-%d"))

    # üìå Trung b√¨nh c√°c ch·∫•t √¥ nhi·ªÖm
    st.write("### üìä Trung b√¨nh c√°c ch·∫•t √¥ nhi·ªÖm:")
    st.write(data[["CO(GT)", "NO2(GT)", "NOx(GT)", "C6H6(GT)"]].mean().to_frame().T)

    # üìâ Bi·ªÉu ƒë·ªì xu h∆∞·ªõng √¥ nhi·ªÖm theo ng√†y
    st.subheader("üìâ Xu h∆∞·ªõng √¥ nhi·ªÖm theo th·ªùi gian")
    fig, ax = plt.subplots(figsize=(10, 5))
    sns.lineplot(x="Date", y="PollutionIndex", data=data, ax=ax, marker="o")
    ax.set_title("üìâ Xu h∆∞·ªõng √¥ nhi·ªÖm theo th·ªùi gian")
    ax.set_xlabel("Ng√†y")
    ax.set_ylabel("Ch·ªâ s·ªë √¥ nhi·ªÖm")
    st.pyplot(fig)


    # üìä Bi·ªÉu ƒë·ªì s·ªë l∆∞·ª£ng ng√†y theo m·ª©c ƒë·ªô √¥ nhi·ªÖm
    st.subheader("üìä S·ªë ng√†y theo m·ª©c ƒë·ªô √¥ nhi·ªÖm")
    fig, ax = plt.subplots(figsize=(8, 4))
    sns.countplot(x="PollutionLevel", data=data, palette="coolwarm", ax=ax)
    ax.set_title("üìä S·ªë l∆∞·ª£ng ng√†y theo m·ª©c ƒë·ªô √¥ nhi·ªÖm")
    st.pyplot(fig)


# --- Qu·∫£n l√Ω ƒëi·ªÅu h∆∞·ªõng trang v·ªõi sidebar ƒë·∫πp h∆°n ---
st.sidebar.markdown(
    """
    <h1 style='text-align: center; color: #2E86C1; font-size: 24px;'>
        üåç Menu Ch√≠nh
    </h1>
    <hr style='border: 1px solid #2E86C1; margin-bottom: 20px;'>  <!-- ƒê∆∞·ªùng ph√¢n c√°ch -->
    <p style='text-align: center; font-size: 14px; margin-bottom: 20px;'>Ch·ªçn trang ƒë·ªÉ kh√°m ph√°:</p>
    <style>
    /* Nh·∫Øm v√†o c√°c n√∫t trong sidebar */
    [data-testid="stSidebar"] div.stButton > button {
        width: 200px !important;  /* Chi·ªÅu r·ªông c·ªë ƒë·ªãnh */
        border: 2px solid #2E86C1 !important;  /* Khung m√†u xanh */
        border-radius: 8px !important;  /* Bo g√≥c */
        padding: 5px !important;  /* Kho·∫£ng c√°ch b√™n trong */
        background-color: #F5F6F5 !important;  /* M√†u n·ªÅn nh·∫°t */
        color: #2E86C1 !important;  /* M√†u ch·ªØ xanh ƒë·∫≠m */
        margin-bottom: 10px !important;  /* Kho·∫£ng c√°ch gi·ªØa c√°c n√∫t */
        display: block !important;  /* ƒê·∫£m b·∫£o n√∫t chi·∫øm to√†n b·ªô chi·ªÅu r·ªông */
        margin-left: auto !important;  /* CƒÉn gi·ªØa */
        margin-right: auto !important;  /* CƒÉn gi·ªØa */
        text-align: center !important;  /* CƒÉn gi·ªØa n·ªôi dung */
        font-size: 16px !important;  /* K√≠ch th∆∞·ªõc ch·ªØ */
        font-weight: bold !important;  /* Ch·ªØ ƒë·∫≠m */
    }
    /* ƒê·∫£m b·∫£o n√∫t kh√¥ng b·ªã ·∫©n */
    [data-testid="stSidebar"] div.stButton > button:hover {
        background-color: #E0E7FF !important;  /* M√†u n·ªÅn khi hover */
        color: #1E3A8A !important;  /* M√†u ch·ªØ khi hover */
    }
    </style>
    """,
    unsafe_allow_html=True
)

if 'current_page' not in st.session_state:
    st.session_state.current_page = "Trang ch·ªß"

if st.sidebar.button("üè† Trang ch·ªß"):
    st.session_state.current_page = "Trang ch·ªß"
if st.sidebar.button("üîç T√¨m ki·∫øm"):
    st.session_state.current_page = "T√¨m ki·∫øm"
if st.sidebar.button("üìä Th·ªëng k√™"):
    st.session_state.current_page = "Th·ªëng k√™"

if st.session_state.current_page == "Trang ch·ªß":
    home_page()
elif st.session_state.current_page == "T√¨m ki·∫øm":
    stats_page()
elif st.session_state.current_page == "Th·ªëng k√™":
    statistic_page()
